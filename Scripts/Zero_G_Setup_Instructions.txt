Zero G Payload Setup Instructions

1) Power on, start up, and log-into the Raspberry Pi Zero 2
     If this is the first time configuring the Raspberry Pi
       a) Set up the user account, use zerog as the user and PW
       b) Install updates, and wait a minute for updates to be installed
       c) Update Raspberry Pi Configuration to enable the following interfaces:
           SPI, I2C, Serial Port, Serial Console, and Remote GPIO
       d) Turn Bluetooth OFF

2) Install the Zero G Payload Software.  Tod do this:
     a) cd ~ 
     b) git clone https://github.com/eric-tapio/Zero_G_Payload.git

3) Enable Scripts to be run. To do this:
     a) cd ~/Zero_G_Payload/Scripts
	chmod +x *.sh

4) Pip install dependencies if it is a new install
     a) ~/Zero_G_Payload/Scripts/pip_install_zero_g_payload_dependencies.sh

5) Configure the RTC to be a device utilized by the system
     a) sudo i2cdetect -y 1
         Verify that the RTC is found at 0x68 

     b) sudo nano /boot/firmware/config.txt 
         At the end, add: dtoverlay=i2c-rtc,ds1307
         sudo reboot

     c) sudo i2cdetect -y 1
         Verify that the RTC now appears as UU at 0x68 

     d) sudo apt -y remove fake-hwclock
     e) sudo update-rc.d -f fake-hwclock remove
     f) sudo nano /lib/udev/hwclock-set 

         Change the following lines to comments:
         #if [ -e /run/systemd/system ] ; then
         #    exit 0
         #fi

     g) sudo hwclock --verbose -r
     h) date
     i) sudo hwclock -w

# Optional, but don't see this as being necessary
6) sudo apt-get install libcamera-apps

7) Create the payload startup service and directory. To do this:
    sudo mkdir /zero_g_startup

8) Copy the zero_g_startup_script.sh startup launch script over to the startup dir
     cd /zero_g_startup
     sudo cp ~/Zero_G_Payload/Scripts/zero_g_startup_script.sh .

#!/bin/bash
python3 /home/zerog/Zero_G_Payload/Program_Files/run_zero_g_experiment_unit.py


9) Create a Zero G Payload start up service
     sudo nano /etc/systemd/system/zero_g_startup.service

[Unit]
Description=Run Zero G Python script on startup
After=network.target

[Service]
ExecStart=/zero_g_startup/zero_g_startup_script.sh

[Install]
WantedBy=default.target

10) Test the startup script by running the Zero G start service .sh file
   sudo ./zero_g_startup_script.sh

   Should see:
   Created symlink /etc/systemd/system/default.target.wants/zero_g_startup.service → /etc/systemd/system/zero_g_startup.service.


11) Create a turn off RPi LED service:
      sudo nano /etc/systemd/system/disable_rpi_power_led.service
          (or consider creating the file and just copying it over?)

[Unit]
Description=Disable Raspberry Pi Power LED
After=multi-user.target

[Service]
Type=oneshot
RemainAfterExit=yes
ExecStart=sh -c "echo 0 | sudo tee /sys/class/leds/ACT/brightness > /dev/null"
ExecStop=sh -c "echo 1 | sudo tee /sys/class/leds/ACT/brightness > /dev/null"

[Install]
WantedBy=multi-user.target

12) Test the turn off RPi LED service
   sudo ./zero_g_startup_script.sh

   Should see:
   Created symlink /etc/systemd/system/default.target.wants/zero_g_startup.service → /etc/systemd/system/zero_g_startup.service.




11) Configure the code as needed, such as IS_EXP_UNIT

7) Run the code locally (stopping the service first)


Turn Wifi and Bluetooth off
Remove Web from launchbar
Configure web bar

Add a new Menu Item named Zero_G_Payload

Create a new applications directory
sudo mkdir /usr/share/applications/Zero_G_Payload

Copy the desktop files to the newly created applications directory
cd /usr/share/applications/Zero_G_Payload
sudo cp ~/Zero_G_Payload/Scripts/Desktop_Files/* .


Add /home/zerog/Zero_G_Payload/Scripts/run_zero_g_experiment_manually.sh to the repo
Add update_zero_g_payload_software.sh to the repo
Add RPI Power LED services .sh files to the repo
Add this updated instruction set to the repo




For each desktop item, which shows up under "Other" in the Menu Bar, Add to Desktop

Delete files and/or directories, as neededs
Empty the Trash

