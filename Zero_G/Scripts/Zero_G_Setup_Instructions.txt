Zero G Setup Instructions

1) start up, log in, setup user account, and install updates
   Use zerog as the user and PW


2) Configure the RTC to be a device utilized by the system
   a) sudo i2cdetect -y 1
       verify that the RTC is found at 0x68 

   b) sudo nano /boot/firmware/config.txt 
       at the end, add: dtoverlay=i2c-rtc,ds1307

   c) sudo i2cdetect -y 1
       verify that the RTC now appears as UU at 0x68 

   d) sudo apt -y remove fake-hwclock
   e) sudo update-rc.d -f fake-hwclock remove
   f) sudo nano /lib/udev/hwclock-set 

      Change the following lines to comments:
      #if [ -e /run/systemd/system ] ; then
      #    exit 0
      #fi


   g) sudo hwclock --verbose -r
   h) date
   i) sudo hwclock -w

3) sudo apt-get install libcamera-apps

2) Create a ~/Zero_G dir and copy all files over to it
 
3) Create the startup dir
sudo mkdir /zero_g_startup

4) Copy the startup launch script over to the startup dir
   - change etapio to zerog
   - filename is: zero_g_startup_script.sh

#!/bin/bash
python3 /home/etapio/Zero_G/Program_Files/run_zero_g_experiment_unit.py


5) Create a start up service

sudo nano /etc/systemd/system/zero_g_startup.service

[Unit]
Description=Run Zero G Python script on startup
After=network.target

[Service]
ExecStart=/zero_g_startup/zero_g_startup_script.sh

[Install]
WantedBy=default.target

5) Test the startup script by running the Zero G start service .sh file
   start_zero_g_experiment_unit_service.sh

   Should see:
   etapio@raspberrypi:~/Zero_G/Scripts $ ./start_zero_g_experiment_unit_service.sh
   Created symlink /etc/systemd/system/default.target.wants/zero_g_startup.service â†’ /etc/systemd/system/zero_g_startup.service.


6) Configure the code as needed, such as IS_EXP_UNIT and change etapio to zerog

7) Run the code locally (stopping the service first)